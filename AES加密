import tkinter as tk
from tkinter import messagebox, scrolledtext
from Crypto.Cipher import AES
import base64
import os

# 创建 GUI 界面
root = tk.Tk()
root.title("AES 加密解密工具")
root.geometry("550x500")
root.configure(bg="#f4f4f4")

def pad(data):
    pad_length = 16 - (len(data) % 16)
    return data + bytes([pad_length] * pad_length)

def unpad(data):
    pad_length = data[-1]
    return data[:-pad_length]

def encrypt():
    key = key_entry.get().encode()
    iv = iv_entry.get().encode()
    text = plaintext_entry.get("1.0", tk.END).strip()
    
    if len(key) not in [16, 24, 32]:
        messagebox.showerror("错误", "密钥长度必须是 16、24 或 32 字节！")
        return
    if len(iv) != 16:
        messagebox.showerror("错误", "IV 长度必须是 16 字节！")
        return
    
    cipher = AES.new(key, AES.MODE_CBC, iv)
    encrypted_text = base64.b64encode(cipher.encrypt(pad(text.encode("utf-8")))).decode()
    
    ciphertext_entry.delete("1.0", tk.END)
    ciphertext_entry.insert("1.0", encrypted_text)

def decrypt():
    key = key_entry.get().encode()
    iv = iv_entry.get().encode()
    encrypted_text = ciphertext_entry.get("1.0", tk.END).strip()
    
    if len(key) not in [16, 24, 32]:
        messagebox.showerror("错误", "密钥长度必须是 16、24 或 32 字节！")
        return
    if len(iv) != 16:
        messagebox.showerror("错误", "IV 长度必须是 16 字节！")
        return
    
    try:
        cipher = AES.new(key, AES.MODE_CBC, iv)
        decrypted_text = unpad(cipher.decrypt(base64.b64decode(encrypted_text))).decode("utf-8")
        plaintext_entry.delete("1.0", tk.END)
        plaintext_entry.insert("1.0", decrypted_text)
    except Exception as e:
        messagebox.showerror("错误", "解密失败，请检查密钥、IV 和密文！")

def generate_iv():
    random_bytes = os.urandom(12)  # 12 字节的数据
    new_iv = base64.urlsafe_b64encode(random_bytes)[:16].decode()  # 编码后取前 16 个字符
    iv_entry.delete(0, tk.END)
    iv_entry.insert(0, new_iv)

def copy_to_clipboard(text_widget):
    root.clipboard_clear()
    root.clipboard_append(text_widget.get("1.0", tk.END).strip())
    root.update()
    messagebox.showinfo("成功", "已复制到剪贴板！")

def copy_iv():
    root.clipboard_clear()
    root.clipboard_append(iv_entry.get().strip())
    root.update()
    messagebox.showinfo("成功", "IV 已复制！")

# **密钥输入框**
tk.Label(root, text="AES 密钥 (16/24/32 字节):", bg="#f4f4f4").pack()
key_entry = tk.Entry(root, width=40)
key_entry.pack()
key_entry.insert(0, "thisisasecretkey")

# **IV 输入框**
tk.Label(root, text="IV (16 字节):", bg="#f4f4f4").pack()
iv_entry = tk.Entry(root, width=40)
iv_entry.pack()
iv_entry.insert(0, "1234567890abcdef")

generate_iv_button = tk.Button(root, text="随机生成 IV", command=generate_iv, bg="#FF9800", fg="white")
generate_iv_button.pack()
copy_iv_button = tk.Button(root, text="复制 IV", command=copy_iv)
copy_iv_button.pack()

# **明文输入框**
tk.Label(root, text="明文:", bg="#f4f4f4").pack()
plaintext_entry = scrolledtext.ScrolledText(root, height=3, width=50)
plaintext_entry.pack()

# **加密 & 复制明文**
encrypt_button = tk.Button(root, text="加密", command=encrypt, bg="#4CAF50", fg="white")
encrypt_button.pack()
copy_plaintext_button = tk.Button(root, text="复制明文", command=lambda: copy_to_clipboard(plaintext_entry))
copy_plaintext_button.pack()

# **密文输入框**
tk.Label(root, text="密文:", bg="#f4f4f4").pack()
ciphertext_entry = scrolledtext.ScrolledText(root, height=3, width=50)
ciphertext_entry.pack()

# **解密 & 复制密文**
decrypt_button = tk.Button(root, text="解密", command=decrypt, bg="#2196F3", fg="white")
decrypt_button.pack()
copy_ciphertext_button = tk.Button(root, text="复制密文", command=lambda: copy_to_clipboard(ciphertext_entry))
copy_ciphertext_button.pack()

# **运行 GUI**
root.mainloop()